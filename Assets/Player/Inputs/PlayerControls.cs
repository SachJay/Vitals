//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Player/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MainGameplay"",
            ""id"": ""c5585ab9-d716-4ec1-9dde-639a5f5c3637"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a2d57b30-8f74-45fa-94af-bb0d7d12f580"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""f279f128-a06a-43dc-a679-7a9e28a04f6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""6822578a-5475-4ec3-af84-c0fe12a901f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""1e1b644a-8b4d-4361-bd0a-1b91d58240d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""09237f32-bd64-46aa-9cb7-1c7e3251d780"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b26aef2-17bf-4439-8f89-c2988eb7d696"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dc43a907-01f3-4d03-bcc1-37c5629dfaee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9e06efc4-cb0b-4b4e-bdcc-74b447ea3a5f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""16757a94-5a42-4bd7-95cb-e6359714cfb1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8191c7af-6ade-449c-b365-92f09b3872e8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FishingMinigame"",
            ""id"": ""6f110ce4-da97-445b-a374-103c266c6141"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""fbc39f76-4a2d-4a5d-9298-d13ceacd5764"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af4c8839-8e62-4c0d-8cd6-cdd674199950"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainGameplay
        m_MainGameplay = asset.FindActionMap("MainGameplay", throwIfNotFound: true);
        m_MainGameplay_Move = m_MainGameplay.FindAction("Move", throwIfNotFound: true);
        m_MainGameplay_Attack = m_MainGameplay.FindAction("Attack", throwIfNotFound: true);
        m_MainGameplay_Dash = m_MainGameplay.FindAction("Dash", throwIfNotFound: true);
        // FishingMinigame
        m_FishingMinigame = asset.FindActionMap("FishingMinigame", throwIfNotFound: true);
        m_FishingMinigame_Newaction = m_FishingMinigame.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainGameplay
    private readonly InputActionMap m_MainGameplay;
    private List<IMainGameplayActions> m_MainGameplayActionsCallbackInterfaces = new List<IMainGameplayActions>();
    private readonly InputAction m_MainGameplay_Move;
    private readonly InputAction m_MainGameplay_Attack;
    private readonly InputAction m_MainGameplay_Dash;
    public struct MainGameplayActions
    {
        private @PlayerControls m_Wrapper;
        public MainGameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MainGameplay_Move;
        public InputAction @Attack => m_Wrapper.m_MainGameplay_Attack;
        public InputAction @Dash => m_Wrapper.m_MainGameplay_Dash;
        public InputActionMap Get() { return m_Wrapper.m_MainGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IMainGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMainGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMainGameplayActions instance)
        {
            if (m_Wrapper.m_MainGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGameplayActions @MainGameplay => new MainGameplayActions(this);

    // FishingMinigame
    private readonly InputActionMap m_FishingMinigame;
    private List<IFishingMinigameActions> m_FishingMinigameActionsCallbackInterfaces = new List<IFishingMinigameActions>();
    private readonly InputAction m_FishingMinigame_Newaction;
    public struct FishingMinigameActions
    {
        private @PlayerControls m_Wrapper;
        public FishingMinigameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_FishingMinigame_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FishingMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingMinigameActions set) { return set.Get(); }
        public void AddCallbacks(IFishingMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingMinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingMinigameActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IFishingMinigameActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IFishingMinigameActions instance)
        {
            if (m_Wrapper.m_FishingMinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingMinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingMinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingMinigameActions @FishingMinigame => new FishingMinigameActions(this);
    public interface IMainGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IFishingMinigameActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
